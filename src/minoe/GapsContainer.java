/*
 * GapsContainer.java
 *
 * This class acts as the container for the different panels that are loaded
 * during the gaps wizard.  The GapsContainer class interacts with the GapsController
 * class to process each panel's data.
 * @author  Dan Spiteri
 */

package minoe;

import au.com.bytecode.opencsv.CSVReader;
import java.awt.CardLayout;
import java.awt.Font;
import java.awt.Rectangle;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.Vector;
import javax.swing.JOptionPane;
import org.openide.util.Exceptions;

public class GapsContainer extends javax.swing.JInternalFrame {
    
    CustomDesktopPane owner;  // parent container

    public boolean errorOnLoad = false;
    
    private final int PANEL_1 = 1;
    private final int PANEL_2 = 2;
    
    GapsPanel1 gapsPanel1;
    GapsPanel2 gapsPanel2;
    GapsPanel3 gapsPanel3;
    
    ResultsFrame resultsFrame;
    
    private CardLayout cardManager;
    private GapsController gapsController;

    String modelName = ""; // the title of the current model
    String defaultTitle = "Gaps Analysis";
    
    /** Creates new form GapsContainer */
    public GapsContainer(CustomDesktopPane owner, String fileName) {
        this.owner = owner;
        // Instantiate panels.
        initPanels();
        
        // Panels are organized in a card layout.
        cardManager = new CardLayout();
        
        // Standard gui components.
        initComponents();
        
        // Gaps controller manages user data and program flow.
        gapsController = new GapsController(this);
        gapsController.setCurrentPanel(PANEL_1);

        // Disable the next and prev buttons by default.
        enableNext(false);
        enablePrevious(false);
        setCenter();
        
        if(fileName != null) {
            this.parseFile(fileName);
        }
        
        
    }

    public void confirmClose(){
        int c = JOptionPane.showConfirmDialog(this,
                "Press OK to quit this analysis.",
                "Quit?",
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE);

        // Continue is pressed.
        if (c == 0){
            this.dispose();
        } else {
            return;
        }
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        containerPanel = new javax.swing.JPanel();
        westPanel = new javax.swing.JPanel();
        stepsLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        step1Label = new javax.swing.JLabel();
        step2Label = new javax.swing.JLabel();
        step3Label = new javax.swing.JLabel();
        step4Label = new javax.swing.JLabel();
        contentPanel = new javax.swing.JPanel();
        bottomPanel = new javax.swing.JPanel();
        previousButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle(org.openide.util.NbBundle.getMessage(GapsContainer.class, "GapsContainer.title")); // NOI18N
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/minoe/greenbutton.png"))); // NOI18N
        setMinimumSize(new java.awt.Dimension(0, 0));
        setPreferredSize(new java.awt.Dimension(550, 550));
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        containerPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        containerPanel.setMaximumSize(new java.awt.Dimension(9999, 9999));
        containerPanel.setLayout(new java.awt.BorderLayout(1, 5));

        westPanel.setBackground(new java.awt.Color(201, 204, 218));
        westPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        westPanel.setMaximumSize(new java.awt.Dimension(400, 400));
        westPanel.setMinimumSize(new java.awt.Dimension(235, 26));
        westPanel.setPreferredSize(new java.awt.Dimension(110, 50));
        westPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        stepsLabel.setFont(new java.awt.Font("Arial", 1, 11));
        stepsLabel.setText(org.openide.util.NbBundle.getMessage(GapsContainer.class, "GapsContainer.stepsLabel.text")); // NOI18N
        westPanel.add(stepsLabel);

        jSeparator1.setForeground(new java.awt.Color(102, 102, 102));
        jSeparator1.setPreferredSize(new java.awt.Dimension(80, 5));
        westPanel.add(jSeparator1);

        step1Label.setFont(new java.awt.Font("Arial", 1, 11));
        step1Label.setText(org.openide.util.NbBundle.getMessage(GapsContainer.class, "GapsContainer.step1Label.text")); // NOI18N
        westPanel.add(step1Label);

        step2Label.setFont(new java.awt.Font("Arial", 0, 11));
        step2Label.setText(org.openide.util.NbBundle.getMessage(GapsContainer.class, "GapsContainer.step2Label.text")); // NOI18N
        westPanel.add(step2Label);

        step3Label.setFont(new java.awt.Font("Arial", 0, 11));
        step3Label.setText(org.openide.util.NbBundle.getMessage(GapsContainer.class, "GapsContainer.step3Label.text")); // NOI18N
        westPanel.add(step3Label);

        step4Label.setFont(new java.awt.Font("Arial", 0, 11));
        step4Label.setText(org.openide.util.NbBundle.getMessage(GapsContainer.class, "GapsContainer.step4Label.text")); // NOI18N
        westPanel.add(step4Label);

        containerPanel.add(westPanel, java.awt.BorderLayout.WEST);

        contentPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        contentPanel.setMaximumSize(new java.awt.Dimension(400, 300));
        contentPanel.setLayout(new java.awt.CardLayout());
        contentPanel.setLayout(this.cardManager);
        // Add panels
        contentPanel.add(gapsPanel1, "1");
        contentPanel.add(gapsPanel2, "2");
        contentPanel.add(gapsPanel3, "3");
        containerPanel.add(contentPanel, java.awt.BorderLayout.CENTER);

        getContentPane().add(containerPanel);

        bottomPanel.setMaximumSize(new java.awt.Dimension(3000, 50));
        bottomPanel.setMinimumSize(new java.awt.Dimension(430, 40));
        bottomPanel.setPreferredSize(new java.awt.Dimension(430, 40));
        bottomPanel.setVerifyInputWhenFocusTarget(false);
        bottomPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 10));

        previousButton.setFont(new java.awt.Font("Arial", 0, 12));
        previousButton.setText(org.openide.util.NbBundle.getMessage(GapsContainer.class, "GapsContainer.previousButton.text")); // NOI18N
        previousButton.setMaximumSize(new java.awt.Dimension(125, 25));
        previousButton.setMinimumSize(new java.awt.Dimension(125, 25));
        previousButton.setPreferredSize(new java.awt.Dimension(125, 25));
        previousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButtonActionPerformed(evt);
            }
        });
        bottomPanel.add(previousButton);

        nextButton.setFont(new java.awt.Font("Arial", 0, 12));
        nextButton.setText(org.openide.util.NbBundle.getMessage(GapsContainer.class, "GapsContainer.nextButton.text")); // NOI18N
        nextButton.setMaximumSize(new java.awt.Dimension(125, 25));
        nextButton.setMinimumSize(new java.awt.Dimension(125, 25));
        nextButton.setPreferredSize(new java.awt.Dimension(125, 25));
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });
        bottomPanel.add(nextButton);

        cancelButton.setFont(new java.awt.Font("Arial", 0, 12));
        cancelButton.setText(org.openide.util.NbBundle.getMessage(GapsContainer.class, "GapsContainer.cancelButton.text")); // NOI18N
        cancelButton.setMaximumSize(new java.awt.Dimension(100, 25));
        cancelButton.setMinimumSize(new java.awt.Dimension(100, 25));
        cancelButton.setPreferredSize(new java.awt.Dimension(100, 25));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        bottomPanel.add(cancelButton);

        helpButton.setFont(new java.awt.Font("Arial", 0, 12));
        helpButton.setText(org.openide.util.NbBundle.getMessage(GapsContainer.class, "GapsContainer.helpButton.text")); // NOI18N
        helpButton.setMaximumSize(new java.awt.Dimension(100, 25));
        helpButton.setMinimumSize(new java.awt.Dimension(100, 25));
        helpButton.setPreferredSize(new java.awt.Dimension(100, 25));
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });
        bottomPanel.add(helpButton);

        getContentPane().add(bottomPanel);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        confirmClose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        if (gapsController.processNext() == true){
            cardManager.next(contentPanel);
        }        
    }//GEN-LAST:event_nextButtonActionPerformed

    private void previousButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousButtonActionPerformed
        if (gapsController.processPrevious() == true){
            cardManager.previous(contentPanel);
        } 
    }//GEN-LAST:event_previousButtonActionPerformed

    @SuppressWarnings("static-access")
    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        // Display the help window.
        try{
           HelpWindow help = new HelpWindow();
           help.main(null);
        } catch (Exception e){
            JOptionPane.showMessageDialog(this, e.toString(), "Error opening help documentation " + e.toString(), JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_helpButtonActionPerformed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        confirmClose();
    }//GEN-LAST:event_formInternalFrameClosing
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel containerPanel;
    private javax.swing.JPanel contentPanel;
    private javax.swing.JButton helpButton;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton previousButton;
    private javax.swing.JLabel step1Label;
    private javax.swing.JLabel step2Label;
    private javax.swing.JLabel step3Label;
    private javax.swing.JLabel step4Label;
    private javax.swing.JLabel stepsLabel;
    private javax.swing.JPanel westPanel;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Instantiates all of the GapsPanels/jpanels.
     * Only the first one is visible.
     */
    public void initPanels(){
        gapsPanel1 = new GapsPanel1(this);
        gapsPanel1.setVisible(true);
        gapsPanel2 = new GapsPanel2(this);        
        gapsPanel3 = new GapsPanel3(this);
    }
    
    /**
     * 
     * @param data
     * @param criteria 
     */
    public void showResults(float[][] data, Vector<SearchCriteria> criteria){
        int c = JOptionPane.showConfirmDialog(this, "Press OK to run the gap analysis on your model.", "Processing terms", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
        // Continue is pressed.
        if (c == 0){
            //this.saveSession(criteria);
            resultsFrame = new ResultsFrame(this.owner, gapsPanel2.getColumnNames(), data, criteria);
            this.owner.add(resultsFrame);
            resultsFrame.validate();
            if(this.modelName.length() > 0){
               resultsFrame.setTitle(resultsFrame.getTitle() + " - " + this.modelName);
            }
        }
    }

    public void saveSession(Vector<SearchCriteria> criteria){
        String curDirName = System.getProperty("user.dir");
        String saveFolder = curDirName + "/save/user_session";
        File curDirHandle = new File(saveFolder);
        FileOutputStream fos = null;
        try {
            fos = new FileOutputStream(curDirHandle);
        } catch (FileNotFoundException ex) {
            Exceptions.printStackTrace(ex);
        }
        ObjectOutputStream oos = null;
        try {
            oos = new ObjectOutputStream(fos);
            for (int i = 0; i < criteria.size(); i++) {
                SearchCriteria cr = criteria.get(i);
                oos.writeObject(cr);
            }
            oos.close();
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }


    }

    /**
     * Determines what to do with a loaded file based upon the file extension.
     * @param fileName
     */
    public void parseFile(String fileName){
        String fileExtension = fileName.substring(fileName.lastIndexOf("."));
        // .ebm  (saved session file)
        if (fileExtension.equalsIgnoreCase(".ebm")){
            this.loadEBMFile(fileName);
        }
        // .csv
        if (fileExtension.equalsIgnoreCase(".csv")){
            this.loadCSVFile(fileName);
        }        
    }

    /**
     * Reads a .ebm file and converts to an array.  Loads the data in screen 2.
     * @param fileName
     */
    public void loadEBMFile(String fileName){
        String[][] linkages = null;
        String[] termList = null;

        BufferedReader br = null;
        try {
            br = new BufferedReader(new FileReader(fileName));
            String line = br.readLine();
            int lineNumber = 1;
            int row=0;
            while(line != null){
                int col=0;
                if(lineNumber == 1){
                   String t = line;
                   this.modelName = t;
                   this.setTitle(this.getTitle() + " - " + t);
                }else if (lineNumber == 2){
                    // Terms are on the second line of the file.
                    termList = line.split("\\|");
                    linkages = new String[termList.length][termList.length];
                }else if(lineNumber > 2){
                    // data is on each line of the file after the term list.
                    String[] lineData = line.split("\\|");
                    for(String link: lineData){
                        linkages[row][col] = link;
                        col++;
                    }
                    row++;

                }
            line = br.readLine();
            lineNumber++;
            }
            
            br.close();
            
            // Populate screens one and two.
            this.gapsPanel1.setListData(termList);
            this.gapsPanel2.setColumnNames(termList);
            this.gapsPanel2.setLinkages(linkages);
            this.gapsController.setCurrentPanel(2);
            this.updateSteps(this.PANEL_2);
            this.enableNext(true);
            this.gapsPanel1.enableRemoveButton(true);
            
            this.cardManager.show(contentPanel, "2");
            
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error reading file:  " + fileName + ". " + ex.toString());
            this.errorOnLoad = true;
        }
        
    }
    
    /**
     * Reads a .csv file and converts to an array.  Loads the data in screen 2.
     * @param fileName
     */    
    public void loadCSVFile(String fileName){
        String[][] linkages = null;
        String[] termList = null;
        int termCount = 0;
        boolean exitLoad = false;

        CSVReader reader = null;
        try {
            reader = new CSVReader(new FileReader(fileName));
            String [] lineData; // array of values from the line

            int lineNumber = 1;
            int row = 0;
            while ((lineData = reader.readNext()) != null && exitLoad == false) {
                int col=0;
                if (lineNumber == 1){
                    // First row and column of the file should be the terms (cell A1 is blank).
                    // Subtract one because cell A1 is (or at least considered) blank.
                    termList = new String[lineData.length - 1];
                    for (int i=1; i < lineData.length; i++) {
                        String term = lineData[i];
                        termList[i-1] = term;
                    }
                    
                    // The linkages table will be the number of terms x number of terms.
                    linkages = new String[termList.length][termList.length];
                    
                }else if (lineNumber > 1){
                    // Data is on each line of the file after the term list.
                    // The first column contains terms.
                    for(String value: lineData){
                        if (col == 0){
                            // Test to make sure file is in correct format.
                            if (termList[row].equals(value) == false){
                                throw new IOException("Import routine aborted, column titles do not match row titles." +
                                        " " + row + " " + value);
                            }
                        }
                        if (col > 0){
                            linkages[row][col-1] = value;
                            termCount++;
                        }
                        col++;
                    }
                    row++;

                }
                lineNumber++;
                if (lineNumber > (termList.length + 1)){
                    exitLoad = true;
                    /*
                    throw new IOException(
                                "Import routine aborted, extra rows detected.  " +
                                "Make sure there are no extra rows at the end of the file.");
                    */
                }
            }//end while

            reader.close();
            
            
            // Populate screens one and two.
            this.gapsPanel1.setListData(termList);
            this.gapsPanel2.setColumnNames(termList);
            this.gapsPanel2.setLinkages(linkages);
            this.gapsController.setCurrentPanel(2);
            this.updateSteps(this.PANEL_2);
            this.enableNext(true);
            this.gapsPanel1.enableRemoveButton(true);
            
            this.cardManager.show(contentPanel, "2");
            
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error reading file:  " + fileName + ". \n" + ex.getLocalizedMessage());
            this.errorOnLoad = true;
        }
        
    }
    /**
     * Enables the next button.
     * @param b boolean Enable=True/Disable=False
     */
    public void enableNext(boolean b){
        if (b==true) {
            nextButton.setEnabled(true);
        }
        if (b==false) {
            nextButton.setEnabled(false);
        }
    }
    
    /**
     * Enables the previous button.
     * @param b boolean Enable=True/Disable=False
     */
    public void enablePrevious(boolean b){
        if (b==true) {
            previousButton.setEnabled(true);
        }
        if (b==false) {
            previousButton.setEnabled(false);
        }
    }
    
    public CardLayout getCardManager(){
        return this.cardManager;
    }
    
    /**
     * 
     * Updates the font styles of the left panel labels so that
     * as the user steps through the wizard the appropriate step is
     * set to bold.
     * @param step int The step to emphasize.
     */ 
    public void updateSteps(int step){
        switch(step){
            case 1: 
                step1Label.setFont(new java.awt.Font("Arial", Font.BOLD, 11));
                step2Label.setFont(new java.awt.Font("Arial", Font.PLAIN, 11));
                break;
            case 2: 
                step1Label.setFont(new java.awt.Font("Arial", Font.PLAIN, 11));
                step2Label.setFont(new java.awt.Font("Arial", Font.BOLD, 11));
                step3Label.setFont(new java.awt.Font("Arial", Font.PLAIN, 11));
                break;
            case 3:
                step2Label.setFont(new java.awt.Font("Arial", Font.PLAIN, 11));
                step3Label.setFont(new java.awt.Font("Arial", Font.BOLD, 11));
                step4Label.setFont(new java.awt.Font("Arial", Font.PLAIN, 11));
                break;
            case 4:
                step2Label.setFont(new java.awt.Font("Arial", Font.PLAIN, 11));
                step3Label.setFont(new java.awt.Font("Arial", Font.PLAIN, 11));
                step4Label.setFont(new java.awt.Font("Arial", Font.BOLD, 11));
                break;
        }
    }
    
    /**
     * Set the frame in the center of the screen.
     */
    public void setCenter(){
        Rectangle r = this.owner.getBounds();
        int width = this.getWidth();
        int height = this.getHeight();        
        // attempt to center the screen on the page
        this.setLocation((r.width - width) / 2, (r.height - height) / 2);
    }
    
  
}

