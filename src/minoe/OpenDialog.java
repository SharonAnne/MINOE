/*
 * OpenDialog.java
 *
 * Displays an open dialog window when the user presses the Open button
 * at the start of the Gaps Wizard.  This class retrieves a list of 
 * .ebm files (pipe-delimited data that holds previously-saved session data) 
 * for the user to choose from. Users also have the choice of importing data from 
 * a file that they choose, but only .csv files are supported at this time.
 */

package minoe;

import java.awt.Rectangle;
import java.io.File;
import java.util.Hashtable;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author  Dan Spiteri
 */
public class OpenDialog extends javax.swing.JInternalFrame {
    
    javax.swing.JDesktopPane owner;
    GapsWizardChooser wizard; // maintain reference to wizard screen

    Hashtable<String,String> fileMap; // map to the file's absolute location.
    
    /** Creates new form OpenDialog */
    public OpenDialog() {
        initComponents();
    }
    
    public OpenDialog(javax.swing.JDesktopPane owner, DefaultListModel dlm, Hashtable files, GapsWizardChooser wizard){
        this.owner = owner;
        this.wizard = wizard;
        this.requestFocusInWindow();
        initComponents();
        setCenter();
        this.fileMap = files;
        this.jList1.setModel(dlm);
        this.validate();
    }
    

    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        importButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        deleteButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        openButton = new javax.swing.JButton();

        setClosable(true);
        setForeground(java.awt.Color.white);
        setResizable(true);
        setTitle(org.openide.util.NbBundle.getMessage(OpenDialog.class, "OpenDialog.title")); // NOI18N
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/minoe/smallearth.png"))); // NOI18N
        setMaximumSize(new java.awt.Dimension(1000, 1000));
        setMinimumSize(new java.awt.Dimension(550, 250));
        setPreferredSize(new java.awt.Dimension(600, 250));
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        setVisible(true);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        jPanel3.setPreferredSize(new java.awt.Dimension(146, 25));
        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.LINE_AXIS));

        jLabel1.setFont(new java.awt.Font("Arial", 0, 12));
        jLabel1.setText(org.openide.util.NbBundle.getMessage(OpenDialog.class, "OpenDialog.jLabel1.text")); // NOI18N
        jPanel3.add(jLabel1);

        getContentPane().add(jPanel3);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.X_AXIS));

        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jList1);

        jPanel1.add(jScrollPane2);

        getContentPane().add(jPanel1);

        jPanel2.setMaximumSize(new java.awt.Dimension(32767, 35));
        jPanel2.setLayout(new java.awt.GridLayout(1, 2));

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        importButton.setFont(new java.awt.Font("Arial", 0, 12));
        importButton.setForeground(new java.awt.Color(0, 0, 255));
        importButton.setText(org.openide.util.NbBundle.getMessage(OpenDialog.class, "OpenDialog.importButton.text")); // NOI18N
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });
        jPanel5.add(importButton);

        jPanel2.add(jPanel5);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        deleteButton.setFont(new java.awt.Font("Arial", 0, 12));
        deleteButton.setForeground(new java.awt.Color(255, 0, 0));
        deleteButton.setText(org.openide.util.NbBundle.getMessage(OpenDialog.class, "OpenDialog.deleteButton.text")); // NOI18N
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        jPanel4.add(deleteButton);

        cancelButton.setFont(new java.awt.Font("Arial", 0, 12));
        cancelButton.setText(org.openide.util.NbBundle.getMessage(OpenDialog.class, "OpenDialog.cancelButton.text")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        jPanel4.add(cancelButton);

        openButton.setFont(new java.awt.Font("Arial", 0, 12));
        openButton.setForeground(new java.awt.Color(0, 204, 0));
        openButton.setText(org.openide.util.NbBundle.getMessage(OpenDialog.class, "OpenDialog.openButton.text")); // NOI18N
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });
        jPanel4.add(openButton);

        jPanel2.add(jPanel4);

        getContentPane().add(jPanel2);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        this.openModel();
}//GEN-LAST:event_openButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
}//GEN-LAST:event_cancelButtonActionPerformed

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
        try{
            JFileChooser jFileChooser1 = new JFileChooser();
            jFileChooser1.showOpenDialog(this);
            String userFile = jFileChooser1.getSelectedFile().getAbsolutePath();

            if (userFile != null){
                if (this.wizard.startGapsAnalysis(userFile) == true){
                    this.dispose();
                }
            }
        }
        catch(Exception ex){

        }
}//GEN-LAST:event_importButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // prompts a user to delete a file and deletes if confirmed.
        if(this.fileMap == null){
            return;
        }
        String fname = null;
        String userFile = null;
        try{
            fname = (String) this.jList1.getSelectedValue();
            userFile = this.fileMap.get(fname);
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "No file selected.");
        }
        try{
            if (userFile != null){
                int c = JOptionPane.showConfirmDialog(this, "Delete " + fname + "?", "Delete Model?", JOptionPane.OK_CANCEL_OPTION);
                if(c == 0){
                   File file = new File(userFile);
                   file.delete();
                   DefaultListModel dlm = (DefaultListModel) this.jList1.getModel();
                   dlm.remove(this.jList1.getSelectedIndex());
                }
            }
        } catch(Exception ex){
            JOptionPane.showMessageDialog(this, "Error deleting file. " + ex.toString());
        } 
}//GEN-LAST:event_deleteButtonActionPerformed

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        if (evt.getClickCount() == 2) {
            this.openModel();
        }
    }//GEN-LAST:event_jList1MouseClicked
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton importButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton openButton;
    // End of variables declaration//GEN-END:variables

    public void openModel(){
        if(this.fileMap == null){
            return;
        }
        String fname = null;
        String userFile = null;
        try{
            fname = (String) this.jList1.getSelectedValue();
            userFile = this.fileMap.get(fname);
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "No file selected.");
        }
        try{
            if (userFile != null){
                if(this.wizard.startGapsAnalysis(userFile) == false){
                   throw new Exception("");
                }
                this.dispose();
            }
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Error loading save file. " + ex.toString());
        } finally{
            this.wizard.dispose();
        }
    }

    /* Puts the frame in the middle of the screen. */
    public void setCenter(){
        Rectangle r = this.owner.getBounds();
        int width = this.getWidth();
        int height = this.getHeight();
        // attempt to center the screen on the page
        this.setLocation((r.width - width) / 2, (r.height - height) / 2);
    }
}
