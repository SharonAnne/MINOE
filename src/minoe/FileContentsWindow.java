/*
 * FileContentsWindow.java
 *
 */

package minoe;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.event.ActionListener;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Document;
import javax.swing.text.Highlighter;
import javax.swing.text.JTextComponent;

/**
 * Displays the contents of a text file in a JFrame.
 * The search string that the user enters is highlighted and
 * marked along the right side as indicators.
 * @author  Daniel Spiteri
 */
public class FileContentsWindow extends javax.swing.JInternalFrame {

    Vector<Integer> positionList;
    public int currentPosition;
    public int characterSpan = 1; // number of characters that equal one tick mark
    public int ticks = 100;
    CustomGoToButton[] buttons;

    /**
     * Highlights the contents.
     * @param title
     * @param contents
     * @param searchString
     */
    public FileContentsWindow(String title, String contents, String searchString) {

        setCursor(new Cursor(Cursor.WAIT_CURSOR));
        initThis();
        setTitle(title);
        setTextArea(contents);

        characterSpan = java.lang.Math.max((contents.length() / ticks), 1);

        if(searchString != null){
            findTextField.setText(searchString);
            highlight(searchString);
        }
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }

    public FileContentsWindow() {
        initThis();
    }

    /**
     * Common constructor methods.
     */
    private void initThis(){
        initComponents();
        setPreferredSize(new java.awt.Dimension(640, 480));
        setVisible(true);
        pack();
    }
    
    public void createGoToButtons(){
        highlightPanel.removeAll();
        this.buttons = new CustomGoToButton[ticks];
        for (Integer p : positionList) {
            CustomGoToButton customGoToButton = new CustomGoToButton(p);
            int indexLocation = p / this.characterSpan;
            if(indexLocation >= this.ticks){
                indexLocation = ticks - 1;
            }
            if(indexLocation < 0){
                indexLocation = 0;
            }
            this.buttons[indexLocation] = customGoToButton;
        }
        for (int i = 0; i < ticks; i++) {
            if(buttons[i] == null){
                this.buttons[i] = new CustomGoToButton(-1);
            }
            this.highlightPanel.add(buttons[i]);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topPanel = new javax.swing.JPanel();
        findTextField = new javax.swing.JTextField();
        findButton = new javax.swing.JButton();
        nextFindButton = new javax.swing.JButton();
        caseCheckBox = new javax.swing.JCheckBox();
        copyButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        statusPanel = new javax.swing.JPanel();
        statusLabel = new javax.swing.JLabel();
        bottomPanel = new javax.swing.JPanel();
        textPanel = new javax.swing.JPanel();
        scrollPane = new javax.swing.JScrollPane();
        fileContentsArea = new javax.swing.JTextArea();
        rightPanel = new javax.swing.JPanel();
        spacerPanel = new javax.swing.JPanel();
        highlightPanel = new javax.swing.JPanel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle(org.openide.util.NbBundle.getMessage(FileContentsWindow.class, "FileContentsWindow.title")); // NOI18N
        setMinimumSize(new java.awt.Dimension(100, 100));
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        topPanel.setMaximumSize(new java.awt.Dimension(32767, 50));
        topPanel.setPreferredSize(new java.awt.Dimension(100, 45));
        topPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        findTextField.setFont(new java.awt.Font("Arial", 0, 12));
        findTextField.setText(org.openide.util.NbBundle.getMessage(FileContentsWindow.class, "FileContentsWindow.findTextField.text")); // NOI18N
        findTextField.setMinimumSize(new java.awt.Dimension(50, 21));
        findTextField.setPreferredSize(new java.awt.Dimension(200, 20));
        topPanel.add(findTextField);

        findButton.setFont(new java.awt.Font("Arial", 0, 12));
        findButton.setText(org.openide.util.NbBundle.getMessage(FileContentsWindow.class, "FileContentsWindow.findButton.text")); // NOI18N
        findButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findButtonActionPerformed(evt);
            }
        });
        topPanel.add(findButton);

        nextFindButton.setFont(new java.awt.Font("Arial", 0, 12));
        nextFindButton.setText(org.openide.util.NbBundle.getMessage(FileContentsWindow.class, "FileContentsWindow.nextFindButton.text")); // NOI18N
        nextFindButton.setEnabled(false);
        nextFindButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextFindButtonActionPerformed(evt);
            }
        });
        topPanel.add(nextFindButton);

        caseCheckBox.setFont(new java.awt.Font("Arial", 0, 11));
        caseCheckBox.setText(org.openide.util.NbBundle.getMessage(FileContentsWindow.class, "FileContentsWindow.caseCheckBox.text")); // NOI18N
        topPanel.add(caseCheckBox);

        copyButton.setFont(new java.awt.Font("Arial", 0, 12));
        copyButton.setText(org.openide.util.NbBundle.getMessage(FileContentsWindow.class, "FileContentsWindow.copyButton.text")); // NOI18N
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });
        topPanel.add(copyButton);
        topPanel.add(jPanel1);

        getContentPane().add(topPanel);

        statusPanel.setMaximumSize(new java.awt.Dimension(32767, 20));
        statusPanel.setPreferredSize(new java.awt.Dimension(100, 20));
        statusPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 1));

        statusLabel.setFont(new java.awt.Font("Arial", 0, 12));
        statusLabel.setText(org.openide.util.NbBundle.getMessage(FileContentsWindow.class, "FileContentsWindow.statusLabel.text")); // NOI18N
        statusPanel.add(statusLabel);

        getContentPane().add(statusPanel);

        bottomPanel.setLayout(new javax.swing.BoxLayout(bottomPanel, javax.swing.BoxLayout.LINE_AXIS));

        textPanel.setMinimumSize(new java.awt.Dimension(100, 100));
        textPanel.setPreferredSize(new java.awt.Dimension(300, 100));
        textPanel.setLayout(new javax.swing.BoxLayout(textPanel, javax.swing.BoxLayout.LINE_AXIS));

        fileContentsArea.setColumns(20);
        fileContentsArea.setEditable(false);
        fileContentsArea.setFont(fileContentsArea.getFont().deriveFont(fileContentsArea.getFont().getSize()-1f));
        fileContentsArea.setLineWrap(true);
        fileContentsArea.setRows(5);
        fileContentsArea.setWrapStyleWord(true);
        fileContentsArea.setSelectionColor(new java.awt.Color(255, 255, 0));
        scrollPane.setViewportView(fileContentsArea);

        textPanel.add(scrollPane);

        bottomPanel.add(textPanel);

        rightPanel.setMaximumSize(new java.awt.Dimension(25, 132767));
        rightPanel.setMinimumSize(new java.awt.Dimension(25, 110));
        rightPanel.setPreferredSize(new java.awt.Dimension(25, 100));
        rightPanel.setLayout(new javax.swing.BoxLayout(rightPanel, javax.swing.BoxLayout.Y_AXIS));

        spacerPanel.setMaximumSize(new java.awt.Dimension(25, 20));
        spacerPanel.setMinimumSize(new java.awt.Dimension(25, 20));
        spacerPanel.setPreferredSize(new java.awt.Dimension(25, 20));
        spacerPanel.setLayout(new javax.swing.BoxLayout(spacerPanel, javax.swing.BoxLayout.LINE_AXIS));
        rightPanel.add(spacerPanel);

        highlightPanel.setFont(new java.awt.Font("Arial", 0, 11));
        highlightPanel.setMaximumSize(new java.awt.Dimension(25, 100000));
        highlightPanel.setMinimumSize(new java.awt.Dimension(25, 100));
        highlightPanel.setPreferredSize(new java.awt.Dimension(25, 100));
        highlightPanel.setLayout(new java.awt.GridLayout(100, 1, 0, 1));
        rightPanel.add(highlightPanel);

        bottomPanel.add(rightPanel);

        getContentPane().add(bottomPanel);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void findButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findButtonActionPerformed
        String searchtext = findTextField.getText();
        highlight(searchtext);
    }//GEN-LAST:event_findButtonActionPerformed

    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed
        try{
            fileContentsArea.selectAll();
            fileContentsArea.copy();
            JOptionPane.showMessageDialog(this, "Text copied to clipboard.");
        }catch(Exception ex){
            JOptionPane.showMessageDialog(this, "Error copying text to clipboard");
        }
}//GEN-LAST:event_copyButtonActionPerformed

    private void nextFindButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextFindButtonActionPerformed
        this.currentPosition++;
        if(this.currentPosition >= this.positionList.size()){
            this.currentPosition = 0;
        }
        repositionCursor(this.positionList.get(this.currentPosition));
    }//GEN-LAST:event_nextFindButtonActionPerformed
    
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            @Override
//            public void run() {
//                new FileContentsWindow().setVisible(true);
//            }
//        });
//    }
    
    public void setTextArea(String t){
        try{
           this.fileContentsArea.setText(t);
        } catch(Exception ex){
            JOptionPane.showMessageDialog(this, "Error: " + ex.toString());
        }
        characterSpan = java.lang.Math.max((t.length() / this.ticks), 1);
    }

    /**
     * Highlights all of the terms in the body of the text.
     * Tokenizes the search string.
     * @param searchString
     */
    public void highlight(String searchString) {

        JTextComponent textComp = this.fileContentsArea;
        // First remove all old highlights
        removeHighlights(textComp);
    
        try {

            // highlighter object belonging to the text area
            Highlighter hilite = textComp.getHighlighter();
            Document doc = textComp.getDocument();
            String rawtext = doc.getText(0, doc.getLength());

            textComp.moveCaretPosition(0);
            String text = rawtext;

            // clean the search string. Removed this because it was breaking UTF8.
            //String cleanText = searchString.replaceAll("[^A-Z a-z0-9'\"]", "");

            String cleanText = searchString;

            String pattern = String.copyValueOf(cleanText.toCharArray());

            // Convert the text and search string to lower case if we don't care about case-matching.
            if(this.caseCheckBox.isSelected() == false){
                text = rawtext.toLowerCase();
                pattern = String.copyValueOf(cleanText.toLowerCase().toCharArray());
            }

            // grab strings between quotes
            Pattern p = Pattern.compile("[\"'](.*?)[\"']");
            Matcher matcher = p.matcher(pattern);
            Vector<String> matches = new Vector<String>();
            while(matcher.find()){
                String group = matcher.group().replaceAll("[\"']", "");
                if(group.length() > 0){
                   matches.add(group);
                }
            }

            // tokenize by quotes, then by spaces
            String[] tokens = pattern.split("[\"']");
            for (String t : tokens) {
                if(!matches.contains(t)){
                    String[] sTokens = t.split(" ");
                    for (String s : sTokens) {
                        if(s.length() > 0){
                            matches.add(s);
                        }
                    }
                }
            }

            // number of times this token was found
            int hits = 0;

            // position of the hit
            int pos = 0;
            this.positionList = new Vector<Integer>();

            // Search for pattern
            for (String token : matches) {
                while ((pos = text.indexOf(token, pos)) >= 0) {
                    // Create highlighter using private painter and apply around pattern
                    hilite.addHighlight(pos, pos+token.length(), myHighlightPainter);
                    pos += token.length();
                    hits++;
                    // Save position
                    this.positionList.add(pos);
                    // Move cursor to first occurence.
                    if(hits == 1){
                        repositionCursor(pos);
                        this.currentPosition = 0;
                    }
                }
            }
            if(hits > 0){
                statusLabel.setText("Highlighting " + hits + " related search tokens.");
            }else{
                statusLabel.setText(hits + " occurence(s) found.");
            }
        } catch (BadLocationException e) {
        }

        if(this.positionList.size() > 0){
            this.nextFindButton.setEnabled(true);
        } else{
            this.nextFindButton.setEnabled(false);
        }
        this.createGoToButtons();
    }

    public void repositionCursor(int position){
        JTextComponent textComp = this.fileContentsArea;
        textComp.moveCaretPosition(0);
        textComp.moveCaretPosition(position);
        textComp.revalidate();
    }
    
    // Removes only our private highlights
    public void removeHighlights(JTextComponent textComp) {
        Highlighter hilite = textComp.getHighlighter();
        Highlighter.Highlight[] hilites = hilite.getHighlights();
    
        for (int i=0; i<hilites.length; i++) {
            if (hilites[i].getPainter() instanceof MyHighlightPainter) {
                hilite.removeHighlight(hilites[i]);
            }
        }
    }
    
    // An instance of the private subclass of the default highlight painter
    Highlighter.HighlightPainter myHighlightPainter = new MyHighlightPainter(Color.YELLOW);
    
    // A private subclass of the default highlight painter
    class MyHighlightPainter extends DefaultHighlighter.DefaultHighlightPainter {
        public MyHighlightPainter(Color color) {
            super(color);
        }
    }


    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JCheckBox caseCheckBox;
    private javax.swing.JButton copyButton;
    private javax.swing.JTextArea fileContentsArea;
    private javax.swing.JButton findButton;
    private javax.swing.JTextField findTextField;
    private javax.swing.JPanel highlightPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton nextFindButton;
    private javax.swing.JPanel rightPanel;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JPanel spacerPanel;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JPanel textPanel;
    private javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables


    class CustomGoToButton extends JButton implements ActionListener{
        int positionLink = -1;

        Border yellowBorder = BorderFactory.createLineBorder(Color.YELLOW, 5);
        Border dBorder = BorderFactory.createLineBorder(Color.lightGray, 5);

        CustomGoToButton(int pos){
            super();
            this.setPreferredSize(new Dimension(25, 10));
            this.setMaximumSize(new Dimension(25, 10));
            this.setMinimumSize(new Dimension(25, 10));
            this.setContentAreaFilled(false);
            if(pos >= 0){
               this.setBackground(Color.yellow);
               this.positionLink = pos;
               this.addActionListener(this);
               this.setBorder(yellowBorder);
               this.setCursor(new Cursor(Cursor.HAND_CURSOR));

            } else{
               this.setBackground(Color.lightGray);
               this.setBorder(dBorder);
               this.setEnabled(false);
            }
        }

        @Override
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if(this.positionLink >= 0){
                repositionCursor(positionLink);
            }
        }
    }

}
