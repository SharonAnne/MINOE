package minoe;

import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URL;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;

/**
 * Displays a new window of the help contents.
 * @author Daniel Spiteri
 */
public class HelpWindow extends javax.swing.JFrame {

    public final JTree tree;

    String dirPrefix = "help/html/";

    /** Creates new form HelpWindow */
    public HelpWindow() throws IOException {

        DefaultMutableTreeNode top =
            new DefaultMutableTreeNode("Help Topics");
        createNodes(top);

        tree = new JTree(top);
        tree.setFont(new Font(Font.DIALOG, Font.PLAIN, 12));
        tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);



        // Another double-click handler for opening a window containing the file contents.
        MouseAdapter treeAdapter = new MouseAdapter(){
            @Override
            public void mouseClicked(MouseEvent e){
                DefaultMutableTreeNode clickedNode = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();
                if (clickedNode == null){
                    return;
                }
                if (clickedNode.isLeaf()) {
                    try {
                        HelpInfo fileToRead = (HelpInfo) clickedNode.getUserObject();
                        String f = fileToRead.fileURL;
                        File helpfile = new File(f);
                        URI helpURI =  helpfile.toURI();
                        URL helpURL = helpURI.toURL();
                        if (helpURL != null) {
                            displayURL(helpURL);
                        } else {
                            System.out.println("Couldn't find help file.");
                        }
                    }
                    catch (Exception ex) {
                            //Exceptions.printStackTrace(ex);
                            //JOptionPane.showMessageDialog(gl.parentOwner, "Unable to open the file: " + fileToRead);
                    }
                }
            }
        };

        tree.addMouseListener(treeAdapter);

        initComponents();
        editorPane.setEditable(false);
        File helpfile = new File(dirPrefix + "background.html");
        URI helpURI =  helpfile.toURI();
        URL helpURL = helpURI.toURL();
        if (helpURL != null) {
            displayURL(helpURL);
        } else {
            System.out.println("Couldn't find help file.");
        }

        JScrollPane scrollPane = new JScrollPane(tree);
        treePanel.add(scrollPane);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        treePanel = new javax.swing.JPanel();
        contentPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        editorPane = new javax.swing.JEditorPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(HelpWindow.class, "HelpWindow.title")); // NOI18N
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        jSplitPane1.setMinimumSize(new java.awt.Dimension(100, 100));
        jSplitPane1.setPreferredSize(new java.awt.Dimension(400, 200));

        treePanel.setMinimumSize(new java.awt.Dimension(100, 100));
        treePanel.setLayout(new javax.swing.BoxLayout(treePanel, javax.swing.BoxLayout.LINE_AXIS));
        jSplitPane1.setLeftComponent(treePanel);

        contentPanel.setLayout(new javax.swing.BoxLayout(contentPanel, javax.swing.BoxLayout.LINE_AXIS));

        jScrollPane1.setViewportView(editorPane);

        contentPanel.add(jScrollPane1);

        jSplitPane1.setRightComponent(contentPanel);

        getContentPane().add(jSplitPane1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    HelpWindow h = new HelpWindow();
                    h.setVisible(true);
                    h.setSize(800,600);

                } catch (IOException ex) {
                    
                }
            }
        });
    }

    public void setSelectedItem(String item){
        TreePath path = tree.getSelectionPath();

    }

    private void displayURL(URL url) {
        try {
            if (url != null) {
                editorPane.setPage(url);
            } else { //null url
		        editorPane.setText("File Not Found");
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(
                    this,
                    "Missing file: " + url,
                    "Error opening help documentation. ",
                    JOptionPane.ERROR_MESSAGE);
        }
    }


    /**
     * Creates the help topic tree.
     * @param top
     */
    private void createNodes(DefaultMutableTreeNode top) {
        DefaultMutableTreeNode category = null;

        category = new DefaultMutableTreeNode("Background");
        category.add(new DefaultMutableTreeNode(new HelpInfo("Purpose and Intended Uses", dirPrefix + "background.html")));
        top.add(category);

        category = new DefaultMutableTreeNode("The MINOE Workspace");
        category.add(new DefaultMutableTreeNode(new HelpInfo("Workspace Layout", dirPrefix + "workspace.html")));
        top.add(category);

        category = new DefaultMutableTreeNode("Gap Analysis");
        category.add(new DefaultMutableTreeNode(new HelpInfo("Getting Started", dirPrefix + "gapanalysis1.html")));
        category.add(new DefaultMutableTreeNode(new HelpInfo("How to Import Your Own Ecosystem", dirPrefix + "gapanalysis2.html")));
        category.add(new DefaultMutableTreeNode(new HelpInfo("Entering Terms", dirPrefix + "gapanalysis3.html")));
        category.add(new DefaultMutableTreeNode(new HelpInfo("Defining Linkages", dirPrefix + "gapanalysis4.html")));
        category.add(new DefaultMutableTreeNode(new HelpInfo("Search Criteria", dirPrefix + "gapanalysis5.html")));
        category.add(new DefaultMutableTreeNode(new HelpInfo("Analyzing Results", dirPrefix + "gapanalysis6.html")));
        category.add(new DefaultMutableTreeNode(new HelpInfo("Computation Metrics", dirPrefix + "metrics.html")));
        top.add(category);

        category = new DefaultMutableTreeNode("Importing Documents");
        category.add(new DefaultMutableTreeNode(new HelpInfo("Importing Documents", dirPrefix + "import.html")));
        top.add(category);

        category = new DefaultMutableTreeNode("Visualization/Graphing Module");
        category.add(new DefaultMutableTreeNode(new HelpInfo("Using the Visualization/Graphing Module", dirPrefix + "visualization.html")));
        top.add(category);

        category = new DefaultMutableTreeNode("The Meta Data and Agency Editors");
        category.add(new DefaultMutableTreeNode(new HelpInfo("The Meta Data and Agency Editors", dirPrefix + "editors.html")));
        top.add(category);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel contentPanel;
    private javax.swing.JEditorPane editorPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel treePanel;
    // End of variables declaration//GEN-END:variables

    private class HelpInfo{
        public String fileName;
        public String fileURL;

        public HelpInfo(String name, String URL){
            this.fileName = name;
            this.fileURL = URL;
        }

        @Override
        public String toString(){
            return this.fileName;
        }
    }

}
