/*
 * GapsWizardChooser.java
 *
 * Created on January 14, 2008, 9:09 PM
 */

package minoe;

import java.awt.Rectangle;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Hashtable;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author  Dan Spiteri
 */
public class GapsWizardChooser extends javax.swing.JInternalFrame {
    
    CustomDesktopPane owner;
    
    ImageIcon prebuilticon = new ImageIcon(
            "resources/graphics/INET_Earth_Clear.png", "Pre-Built");
    ImageIcon createnewicon = new ImageIcon(
            "resources/graphics/Customize.png", "New");

    
    /** Creates new form GapsWizardChooser */
    public GapsWizardChooser(CustomDesktopPane owner) {
        this.owner = owner;
        initComponents();
        setVisible(true);
        setCenter();
    }
    
    public GapsWizardChooser() {
        initComponents();
        setVisible(true);
        setCenter();
    }
    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        openButton = new javax.swing.JButton();
        newButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jTextArea1 = new javax.swing.JTextArea();
        jTextArea2 = new javax.swing.JTextArea();

        setClosable(true);
        setIconifiable(true);
        setTitle("Gaps Analysis");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/minoe/smallearth.png"))); // NOI18N
        setMinimumSize(new java.awt.Dimension(450, 200));
        setPreferredSize(new java.awt.Dimension(450, 275));
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));

        openButton.setFont(new java.awt.Font("Arial", 0, 10));
        openButton.setIcon(prebuilticon);
        openButton.setText("Open");
        openButton.setMaximumSize(new java.awt.Dimension(200, 200));
        openButton.setMinimumSize(new java.awt.Dimension(100, 25));
        openButton.setPreferredSize(new java.awt.Dimension(200, 100));
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });
        jPanel1.add(openButton);

        newButton.setFont(new java.awt.Font("Arial", 0, 10));
        newButton.setIcon(createnewicon);
        newButton.setText("New");
        newButton.setMaximumSize(new java.awt.Dimension(200, 200));
        newButton.setMinimumSize(new java.awt.Dimension(100, 25));
        newButton.setPreferredSize(new java.awt.Dimension(200, 100));
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });
        jPanel1.add(newButton);

        getContentPane().add(jPanel1);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setPreferredSize(new java.awt.Dimension(125, 125));
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 30));

        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setFont(new java.awt.Font("Arial", 0, 12));
        jTextArea1.setRows(5);
        jTextArea1.setText("Use an existing\npre-built ecosystem\nfor a particular \ngeographic area.\n");
        jTextArea1.setWrapStyleWord(true);
        jPanel2.add(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setEditable(false);
        jTextArea2.setFont(new java.awt.Font("Arial", 0, 12));
        jTextArea2.setRows(5);
        jTextArea2.setText("Define your own ecosystem\nutilizing a variety\nof terms.");
        jTextArea2.setWrapStyleWord(true);
        jPanel2.add(jTextArea2);

        getContentPane().add(jPanel2);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void newButtonActionPerformed(java.awt.event.ActionEvent evt){
        this.startGapsAnalysis(null);    
    }
    /**
     * Display list of saved ecosystem models (.ebm files).
     * @param evt
     */
    private void openButtonActionPerformed(java.awt.event.ActionEvent evt){
        // grab list of .ebm files
        DefaultListModel defaultListModel = new DefaultListModel();
        Hashtable<String,String> fileMap = new Hashtable();
        String curDirName = System.getProperty("user.dir");
        String saveFolder = curDirName + "/save";
        File curDirHandle = new File(saveFolder);
        // save ecosystem model to the save folder if it exists
        try{
            if(!curDirHandle.isDirectory() || !curDirHandle.canRead()){
                curDirHandle = new File(curDirName);
                if(!curDirHandle.isDirectory() || !curDirHandle.canRead()){
                    throw new java.io.FileNotFoundException();
                }
            }

            File[] rootContents = curDirHandle.listFiles();
            for (File file : rootContents) {
                if ( file.getName().endsWith(".ebm") ){
                    String f = file.getName();
                    String fn = f.substring(0, f.indexOf("."));
                    defaultListModel.addElement(fn);
                    fileMap.put(fn, file.getAbsolutePath());
                }
            }

            OpenDialog openDialog = new OpenDialog(this.owner, defaultListModel, fileMap, this);
            this.owner.add(openDialog);
            openDialog.requestFocusInWindow();
            openDialog.toFront();

        } catch(FileNotFoundException ex){
                JOptionPane.showMessageDialog(this,
                        "The save folder is not found or cannot be read.",
                        "Cannot Save",
                        JOptionPane.WARNING_MESSAGE);
        }
    }
    
    /**
     * Destroys this window and begins the gaps analysis.
     * @param fileName String If set, opens a previously saved session.
     */
    public boolean startGapsAnalysis(String fileName){
        GapsContainer gapsContainer = new GapsContainer(this.owner, fileName);
        if (gapsContainer.errorOnLoad){
            // couldn't read the file
            return false;
        }
        gapsContainer.setVisible(true);
        this.owner.add(gapsContainer);
        gapsContainer.toFront();
        return true;
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JButton newButton;
    private javax.swing.JButton openButton;
    // End of variables declaration//GEN-END:variables
    
    /* Puts the frame in the middle of the screen. */
    public void setCenter(){
        Rectangle r = this.owner.getBounds();
        int width = this.getWidth();
        int height = this.getHeight();
        // attempt to center the screen on the page
        this.setLocation((r.width - width) / 2, (r.height - height) / 2);
    }
    
}//end class
