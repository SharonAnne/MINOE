package minoe;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.util.Hashtable;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/*
 * ImportWizard.java
 *
 * Handles the import document routine for adding text documents to
 * the document collection.  Implements a CollectionController that does
 * the work for most of this operation.  Displays a GUI.
 * 
 * @author Daniel Spiteri
 */
public class ImportWizard extends javax.swing.JInternalFrame {

    Globals globals;
    DefaultListModel fileListModel;
    DefaultListModel tagListModel;
    CollectionController cc;
    private CollectionWorker bw;


    /** Creates new form ImportWizard */
    public ImportWizard() {
        initComponents();
    }

    public ImportWizard(File importFolder, Globals g) {
        this.globals = g;
        this.cc = new CollectionController();
        this.fileListModel = new DefaultListModel();
        this.tagListModel = new DefaultListModel();

        // populate list of documents to be imported
        populateList(importFolder);

        initComponents();

        // Hide this panel.  Tags no longer used, but maybe useful in the future for something.
        this.tagPanel.setVisible(false);
        
        setTitleLabel("Displaying contents of " + importFolder.getAbsolutePath());
        setCenter();
        pack();
        setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titlePanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        optionsPanel = new javax.swing.JPanel();
        eraseCheckBox = new javax.swing.JCheckBox();
        overwriteCheckBox = new javax.swing.JCheckBox();
        tagPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tagList = new javax.swing.JList();
        documentPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        documentList = new javax.swing.JList();
        bottomPanel = new javax.swing.JPanel();
        continueButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Import Document Wizard");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/minoe/greenarrow.png"))); // NOI18N
        setMinimumSize(new java.awt.Dimension(127, 400));
        setPreferredSize(new java.awt.Dimension(640, 480));
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        titlePanel.setMaximumSize(new java.awt.Dimension(32767, 25));
        titlePanel.setMinimumSize(new java.awt.Dimension(0, 25));
        titlePanel.setPreferredSize(new java.awt.Dimension(10, 25));
        titlePanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        titleLabel.setFont(new java.awt.Font("Arial", 1, 11));
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        titleLabel.setText("Displaying all valid documents found");
        titlePanel.add(titleLabel);

        getContentPane().add(titlePanel);

        jSeparator1.setForeground(new java.awt.Color(51, 51, 51));
        jSeparator1.setMaximumSize(new java.awt.Dimension(32767, 2));
        jSeparator1.setPreferredSize(new java.awt.Dimension(420, 2));
        getContentPane().add(jSeparator1);

        jPanel1.setMaximumSize(new java.awt.Dimension(32767, 40));
        jPanel1.setMinimumSize(new java.awt.Dimension(215, 40));
        jPanel1.setPreferredSize(new java.awt.Dimension(494, 40));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 10));

        nameLabel.setFont(new java.awt.Font("Arial", 1, 12));
        nameLabel.setText("Enter a name for this collection:");
        jPanel1.add(nameLabel);

        nameTextField.setFont(new java.awt.Font("Arial", 0, 12));
        nameTextField.setText("My Collection");
        nameTextField.setPreferredSize(new java.awt.Dimension(200, 25));
        nameTextField.setSelectionEnd(20);
        nameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTextFieldActionPerformed(evt);
            }
        });
        jPanel1.add(nameTextField);

        getContentPane().add(jPanel1);

        optionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Options", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 11))); // NOI18N
        optionsPanel.setMaximumSize(new java.awt.Dimension(32767, 75));
        optionsPanel.setMinimumSize(new java.awt.Dimension(403, 75));
        optionsPanel.setPreferredSize(new java.awt.Dimension(626, 75));
        optionsPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        eraseCheckBox.setFont(new java.awt.Font("Arial", 0, 12));
        eraseCheckBox.setText("Erase entire collection");
        eraseCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eraseCheckBoxActionPerformed(evt);
            }
        });
        optionsPanel.add(eraseCheckBox);

        overwriteCheckBox.setFont(new java.awt.Font("Arial", 0, 12));
        overwriteCheckBox.setText("Overwrite existing files with the same name");
        overwriteCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                overwriteCheckBoxActionPerformed(evt);
            }
        });
        optionsPanel.add(overwriteCheckBox);

        getContentPane().add(optionsPanel);

        tagPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "The tags listed below will be available for filtering (tag - file count)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 11))); // NOI18N
        tagPanel.setFont(new java.awt.Font("Arial", 0, 11));
        tagPanel.setMaximumSize(new java.awt.Dimension(32783, 200));
        tagPanel.setPreferredSize(new java.awt.Dimension(727, 150));
        tagPanel.setLayout(new javax.swing.BoxLayout(tagPanel, javax.swing.BoxLayout.Y_AXIS));

        tagList.setModel(this.tagListModel);
        tagList.setFont(new java.awt.Font("Arial", 0, 12));
        jScrollPane2.setViewportView(tagList);

        tagPanel.add(jScrollPane2);

        getContentPane().add(tagPanel);
        tagPanel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(ImportWizard.class, "ImportWizard.tagPanel.AccessibleContext.accessibleName")); // NOI18N

        documentPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "The documents listed below will be imported", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 11))); // NOI18N
        documentPanel.setLayout(new javax.swing.BoxLayout(documentPanel, javax.swing.BoxLayout.Y_AXIS));

        documentList.setFont(new java.awt.Font("Arial", 0, 12));
        documentList.setModel(this.fileListModel);
        jScrollPane1.setViewportView(documentList);

        documentPanel.add(jScrollPane1);

        getContentPane().add(documentPanel);

        bottomPanel.setMaximumSize(new java.awt.Dimension(32767, 50));
        bottomPanel.setPreferredSize(new java.awt.Dimension(494, 50));
        bottomPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        continueButton.setFont(new java.awt.Font("Arial", 0, 12));
        continueButton.setText("Continue");
        continueButton.setPreferredSize(new java.awt.Dimension(90, 23));
        continueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continueButtonActionPerformed(evt);
            }
        });
        bottomPanel.add(continueButton);

        cancelButton.setFont(new java.awt.Font("Arial", 0, 12));
        cancelButton.setText("Cancel");
        cancelButton.setPreferredSize(new java.awt.Dimension(90, 23));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        bottomPanel.add(cancelButton);

        helpButton.setFont(new java.awt.Font("Arial", 0, 12));
        helpButton.setText("Help");
        helpButton.setPreferredSize(new java.awt.Dimension(90, 23));
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });
        bottomPanel.add(helpButton);

        getContentPane().add(bottomPanel);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Begin importing documents into the collection.
     * Makes a new collection worker that does all the work and displays
     * a status frame window so the user knows what's going on.
     * @param evt
     */
    private void continueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continueButtonActionPerformed
        
        int c = JOptionPane.showConfirmDialog(this,
                "Press OK to begin the import process.",
                "Import Documents?",
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE);
        if(c == 0){
            StatusFrame statusFrame = new StatusFrame(false);
            statusFrame.setLabel("");
            statusFrame.setProgressBar("Importing documents ", 0);
            statusFrame.setVisible(true);

            String collectionName = this.nameTextField.getText().trim();
            this.cc.setCollectionName(collectionName);
            boolean clearDB = false;
            if(this.eraseCheckBox.isSelected()){
                clearDB = true;
            }
            boolean overwrite = false;
            if(this.overwriteCheckBox.isSelected()){
                overwrite = true;
            }
            
            try {
                this.bw = new CollectionWorker(this.cc, this.globals.getIndexFolder(), statusFrame, this, globals);
                this.bw.setType(bw.IMPORT);
                this.bw.setClearDB(clearDB);
                this.bw.setOverwrite(overwrite);
                this.bw.execute();
                
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Error importing documents: " + ex.toString());
            } 
        }

}//GEN-LAST:event_continueButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        int c = JOptionPane.showConfirmDialog(this,
                "Press OK to cancel the import document routine.",
                "Cancel?",
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE);

        // Continue is pressed.
        if (c == 0){
            this.dispose();
        }
}//GEN-LAST:event_cancelButtonActionPerformed

    @SuppressWarnings("static-access")
    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        // Display the help window.
        try{
            HelpWindow help = new HelpWindow();
            help.main(null);
        } catch (Exception e){
            JOptionPane.showMessageDialog(this, e.toString(), "Error opening help documentation " + e.toString(), JOptionPane.ERROR_MESSAGE);
        }
}//GEN-LAST:event_helpButtonActionPerformed

    private void nameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTextFieldActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_nameTextFieldActionPerformed

    private void eraseCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eraseCheckBoxActionPerformed
        if(this.eraseCheckBox.isSelected()){
            this.overwriteCheckBox.setSelected(true);
            this.overwriteCheckBox.setEnabled(false);
            JOptionPane.showMessageDialog(this, "Warning:  Removing documents from the collection cannot be undone.  It will still be possible to use your documents by themselves if you leave this unchecked.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_eraseCheckBoxActionPerformed

    private void overwriteCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_overwriteCheckBoxActionPerformed
        if(this.overwriteCheckBox.isSelected()){

        }
    }//GEN-LAST:event_overwriteCheckBoxActionPerformed

    public void setTitleLabel(String s){
        this.titleLabel.setText(s);
    }

    /**
     * Builds a list of all the files to be imported in the specified folder
     * and populates the collection controller with this data.
     * @param folder
     */
    public void populateList(File folder){
        try{
            StatusFrame statusFrame = new StatusFrame(this);
            this.cc.setStatusFramePointer(statusFrame);
            this.bw = new CollectionWorker(this.cc, folder, statusFrame, this, globals);
            this.bw.execute();
        } catch(Exception e){
        }
    }

    /**
     * Displays the files from populateList() for the user to see.
     */
    public void populateListComponents(){
        Vector<String> files = this.cc.absFilePaths;
        Vector<String> tags = this.cc.getNonZeroTags();
        Hashtable<String, Integer> counts = this.cc.tagCounts;
        if(files.size() < 1){
            JOptionPane.showMessageDialog(this, "The selected folder contains no valid import file types.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            // populate list of tags and counts
            for (String tag : tags) {
                Integer count = counts.get(tag);
                String tagItem = tag + " (" + count + ")";
                this.tagListModel.addElement(tagItem);
            }
            // populate list of files
            for (String file : files) {
                this.fileListModel.addElement(file);
            }
            int total = files.size();
            String t = "The documents listed below will be imported (" + total + ")";
            documentPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null,
                    t,
                    javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
                    javax.swing.border.TitledBorder.DEFAULT_POSITION,
                    new java.awt.Font("Arial", 0, 11))); // NOI18N

            // See if meta data file was present
            if(this.cc.localInfoFile == null){
                JOptionPane.showMessageDialog(this,
                        "Note:  The meta data for this collection was not found. " +
                        "You will have the opportunity to update this information after importing, " +
                        "otherwise you may cancel the import routine.",
                        "Meta Data File Not Found",
                        JOptionPane.QUESTION_MESSAGE);
            }

        }
    }

    /**
     * Positions the window in the center of the screen.
     */
    public void setCenter(){
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        int width = this.getWidth();
        int height = this.getHeight();
        // attempt to center the screen on the page
        this.setLocation((screenSize.width - width) / 2, (screenSize.height - height) / 2);
    }

    /**
     * User cancels the import routine.
     */
    public void cancel(){
        this.bw.cancel(true);
        this.cc = null;
        this.cc = new CollectionController();
        this.dispose();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton continueButton;
    private javax.swing.JList documentList;
    private javax.swing.JPanel documentPanel;
    private javax.swing.JCheckBox eraseCheckBox;
    private javax.swing.JButton helpButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JPanel optionsPanel;
    private javax.swing.JCheckBox overwriteCheckBox;
    private javax.swing.JList tagList;
    private javax.swing.JPanel tagPanel;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JPanel titlePanel;
    // End of variables declaration//GEN-END:variables

}

 class CollectionWorker extends SwingWorker<Void, Void> {
        /*
         * Executed in background thread.
         */
        StatusFrame sf;
        CollectionController cc;
        File folder;
        ImportWizard wizard;
        Globals globals;

        final int GENERATE_LIST = 0; // build list of documents
        final int IMPORT = 1;        // import the documents
        int type = GENERATE_LIST;

        boolean clearDB = false;    // wipe out the index and start from scratch?
        boolean overwrite = false;  // overwrite existing files of the same name?

        public CollectionWorker(CollectionController controller, File folder, StatusFrame sf, ImportWizard wizard, Globals globals){
            // create table data for each panel
            this.cc = controller;
            this.folder = folder;
            this.sf = sf;
            this.wizard = wizard;
            this.globals = globals;
        }

        public void setType(int t){
            this.type = t;
        }

        public void setClearDB(boolean b){
            this.clearDB = b;
        }

        public void setOverwrite(boolean b){
            this.overwrite = b;
        }

        @Override
        public Void doInBackground() {
            switch(this.type){
                case GENERATE_LIST:
                    this.cc.buildListOfDocuments(this.folder);
                    break;
                case IMPORT:
                    this.cc.importDocuments(this.folder, this.clearDB, this.overwrite, this.sf);
                    MetaDataController m = this.wizard.globals.getMetaDataController();
                    ConfigFileLoader cfl = this.wizard.globals.getConfigurationInfo();
                    // Update the meta data file
                    if(this.cc.localInfoFile != null){
                        try{
                            this.sf.setLabel("Updating meta data...");
                            m.addUserMetaData(this.cc.localInfoFile, this.cc.collectionName, clearDB);
                            m.saveMetaDataFile(cfl.getMetaDir());
                            m.loadDataFile(cfl.getMetaDir()); // reload meta data file
                        } catch(Exception ex){
                            JOptionPane.showMessageDialog(null, "Error updating meta data.");
                        }
                    }

                    globals.setMetaDataController(this.globals.getMetaDataController());  // reload index in memory


                    break;
                default: break;
            }
            return null;
        }

        /*
         * Executed in event dispatching thread
         */
        @Override
        public void done() {
            if (this.isCancelled() == false){
                switch(this.type){
                    case GENERATE_LIST:
                        this.wizard.populateListComponents();
                        break;
                    case IMPORT:
                        this.sf.dispose();
                        int p = JOptionPane.showConfirmDialog(wizard,
                                "Import completed!  Press OK to Quit the import routine.",
                                "Import completed",
                                JOptionPane.OK_CANCEL_OPTION,
                                JOptionPane.INFORMATION_MESSAGE);
                        if(p == 0){
                            this.wizard.dispose();
                        }
                        break;
                    default: break;
                }
                if(this.sf != null){
                    this.sf.dispose();
                }
            }
        }
}//end class CollectionWorker


